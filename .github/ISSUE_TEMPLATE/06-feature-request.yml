name: ‚ú® Solicitar Nova Funcionalidade
description: Propor uma nova funcionalidade ou melhoria para o sistema
title: "[FEATURE] "
labels: ["enhancement", "feature-request"]
assignees:
  - copilot
body:
  - type: markdown
    attributes:
      value: |
        ## Solicitar Nova Funcionalidade
        Use este formul√°rio para propor novas funcionalidades ou melhorias significativas no sistema.

  - type: dropdown
    id: feature-area
    attributes:
      label: √Årea da Funcionalidade
      description: Qual parte do sistema esta funcionalidade afeta?
      options:
        - Gest√£o de Atividades
        - Inscri√ß√µes de Estudantes
        - Autentica√ß√£o e Permiss√µes
        - Interface do Usu√°rio
        - Filtros e Busca
        - Relat√≥rios e Estat√≠sticas
        - Notifica√ß√µes
        - API/Integra√ß√µes
        - Outra
    validations:
      required: true

  - type: textarea
    id: description
    attributes:
      label: Descri√ß√£o da Funcionalidade
      description: Descreva detalhadamente a funcionalidade desejada
      placeholder: "Ex: Gostaria de poder exportar a lista de participantes de cada atividade em formato CSV para facilitar relat√≥rios"
    validations:
      required: true

  - type: textarea
    id: problem
    attributes:
      label: Problema que Resolve
      description: Que problema ou necessidade esta funcionalidade atende?
      placeholder: "Ex: Atualmente √© dif√≠cil gerar relat√≥rios de participa√ß√£o para a administra√ß√£o da escola"
    validations:
      required: true

  - type: textarea
    id: current-workaround
    attributes:
      label: Como Voc√™ Faz Atualmente
      description: Como voc√™ resolve este problema hoje? Qual √© o processo manual?
      placeholder: "Ex: Tenho que copiar manualmente cada email da interface e colar em uma planilha"
    validations:
      required: false

  - type: textarea
    id: proposed-solution
    attributes:
      label: Solu√ß√£o Proposta
      description: Como voc√™ imagina que esta funcionalidade funcionaria?
      placeholder: |
        Ex:
        1. Bot√£o "Exportar" em cada atividade
        2. Ao clicar, gera arquivo CSV com nome, email, data de inscri√ß√£o
        3. Download autom√°tico do arquivo
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Prioridade
      description: Qual a import√¢ncia desta funcionalidade?
      options:
        - Alta - Necessidade urgente ou cr√≠tica
        - M√©dia - Importante mas n√£o urgente
        - Baixa - Seria bom ter mas n√£o √© essencial
    validations:
      required: true

  - type: dropdown
    id: user-type
    attributes:
      label: Quem se Beneficiaria
      description: Quem utilizaria principalmente esta funcionalidade?
      options:
        - Professores
        - Administradores
        - Estudantes (indiretamente)
        - Todos
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Crit√©rios de Aceita√ß√£o
      description: Como saberemos que a funcionalidade est√° completa e funcionando?
      placeholder: |
        - [ ] Bot√£o de exportar vis√≠vel em cada atividade
        - [ ] Arquivo CSV gerado com campos corretos
        - [ ] Download funciona em todos navegadores principais
        - [ ] Dados exportados s√£o precisos
      value: |
        - [ ]
        - [ ]
        - [ ]
    validations:
      required: true

  - type: textarea
    id: examples
    attributes:
      label: Exemplos ou Refer√™ncias
      description: Conhece algum sistema similar que implementa isso? Tem screenshots ou mockups?
      placeholder: "Ex: O sistema X tem uma funcionalidade parecida que funciona assim..."
    validations:
      required: false

  - type: checkboxes
    id: breaking-changes
    attributes:
      label: Impacto
      description: Esta funcionalidade pode afetar funcionalidades existentes?
      options:
        - label: Pode afetar funcionalidades existentes
        - label: Requer mudan√ßas no banco de dados
        - label: Requer mudan√ßas na API
        - label: Requer mudan√ßas na interface
        - label: Requer novas bibliotecas/depend√™ncias

  - type: textarea
    id: technical-notes
    attributes:
      label: Notas T√©cnicas (Opcional)
      description: Se voc√™ tem ideias sobre a implementa√ß√£o t√©cnica, compartilhe aqui
      placeholder: |
        Ex:
        - Poderia usar biblioteca Apache Commons CSV
        - Adicionar endpoint GET /activities/{name}/export
        - Frontend faz chamada e dispara download
    validations:
      required: false

  - type: markdown
    attributes:
      value: |
        ---
        ### üìã Crit√©rios de Aceita√ß√£o Padr√£o

        A funcionalidade ser√° considerada completa quando:
        - ‚úÖ Todos os crit√©rios de aceita√ß√£o espec√≠ficos forem atendidos
        - ‚úÖ A funcionalidade for testada manualmente e funcionar conforme esperado
        - ‚úÖ Testes automatizados forem adicionados (unit√°rios e/ou integra√ß√£o)
        - ‚úÖ A documenta√ß√£o for atualizada (README, coment√°rios no c√≥digo)
        - ‚úÖ O c√≥digo seguir os padr√µes arquiteturais do projeto (Clean Architecture)
        - ‚úÖ Os testes existentes continuarem passando
        - ‚úÖ N√£o houver regress√£o em funcionalidades existentes

        ### üîß Informa√ß√µes T√©cnicas para o Agente Copilot

        **Princ√≠pios de Implementa√ß√£o:**
        - Seguir Clean Architecture: Domain ‚Üí Application ‚Üí Infrastructure ‚Üí Presentation
        - Adicionar valida√ß√µes na camada de Domain quando aplic√°vel
        - Criar casos de uso na camada Application para orquestrar l√≥gica
        - Implementar endpoints REST na camada Presentation
        - Usar DTOs para comunica√ß√£o externa

        **Estrutura de Implementa√ß√£o:**
        1. **Domain**: Adicionar entidades, value objects ou m√©todos de dom√≠nio necess√°rios
        2. **Application**: Criar ou modificar casos de uso (UseCases) e DTOs
        3. **Infrastructure**: Adicionar configura√ß√µes, migrations ou implementa√ß√µes de reposit√≥rio
        4. **Presentation**: Criar/modificar controllers e mappers
        5. **Frontend**: Atualizar HTML/CSS/JS em `src/main/resources/static/`

        **Padr√µes de C√≥digo:**
        - Inje√ß√£o de depend√™ncia via construtor
        - Valida√ß√µes auto-contidas em entities e value objects
        - Retorno de ResponseEntity<?> em controllers
        - Uso de Map.of("detail", message) para erros
        - Testes com JUnit 5 e Mockito

        **Checklist de Implementa√ß√£o:**
        - [ ] Camada Domain modificada/criada
        - [ ] Caso de uso implementado
        - [ ] Controller/endpoint criado
        - [ ] Frontend atualizado (se aplic√°vel)
        - [ ] Testes unit√°rios adicionados
        - [ ] Testes de integra√ß√£o adicionados (se aplic√°vel)
        - [ ] Documenta√ß√£o atualizada
        - [ ] Migration criada (se mudan√ßas no DB)
